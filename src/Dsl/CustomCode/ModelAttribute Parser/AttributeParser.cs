using System;
using System.IO;
using GOLD;
// ReSharper disable RedundantVerbatimPrefix
// ReSharper disable UnusedMember.Local
// ReSharper disable UnusedMember.Global
#pragma warning disable 1591

namespace Sawczyn.EFDesigner.EFModel
{
   /// <summary>
   /// Based on Devin Cook's Gold Parser skeleton and using cook.net.dll v5.0
   /// </summary>
   public static class AttributeParser
   {
      private static Parser _parser;

      private static Parser Parser
      {
         get
         {
            if (_parser == null)
            {
               _parser = new Parser { TrimReductions = false };

               using (MemoryStream stream = new MemoryStream(Resources.AttributeGrammar))
               {
                  using (BinaryReader reader = new BinaryReader(stream))
                  {
                     _parser.LoadTables(reader);
                  }
               }
            }

            return _parser;
         }
      }

      // ReSharper disable once MemberCanBePrivate.Global
      public static string FailMessage { get; private set; }

      public static ParseResult Parse(string txt)
      {
         if (txt == null)
            throw new ArgumentNullException(nameof(txt));

         // based on skeleton code generated by Gold Parser Builder 5.2 (http://www.goldparser.org)
         FailMessage = null;
         ParseResult result = new ParseResult();

         Parser.Open(ref txt);

         while (true)
         {
            ParseMessage response = Parser.Parse();

            switch (response)
            {
               case ParseMessage.Reduction:
                  if (Parser.CurrentReduction is Reduction reduction)
                  {
                     switch ((ProductionIndex)reduction.Parent.TableIndex())
                     {
                        case ProductionIndex.Name_Identifier:

                           // <Name> ::= Identifier
                           result.Name = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Isidentity_Identity:

                           // <Is Identity> ::= Identity
                           result.IsIdentity = reduction.get_Data(0) as string == "!";
                           break;

                        case ProductionIndex.Isoptional_Optional:

                           // <Is Optional> ::= Optional
                           result.Required = reduction.get_Data(0) as string != "?";
                           break;

                        case ProductionIndex.Maxlength_Lbracket_Decliteral_Rbracket:
                        case ProductionIndex.Maxlength_Lparen_Decliteral_Rparen:
                        case ProductionIndex.Maxlength_Lbracketmaxrbracket:                 
                        case ProductionIndex.Maxlength_Lparenmaxrparen:                 

                           // <Max Length> ::= '[' DecLiteral ']'
                           // <Max Length> ::= '(' DecLiteral ')'
                           // <Max Length> ::= '[max]'
                           // <Max Length> ::= '(max)'
                           if (reduction.get_Data(0) is string maxLength && 
                               (maxLength.ToLowerInvariant() == "[max]" || 
                                maxLength.ToLowerInvariant() == "(max)"))
                           {
                              result.MaxLength = ModelAttribute.MAXLENGTH_MAX;
                              break;
                           }

                           result.MaxLength = int.TryParse(reduction.get_Data(1) as string, out int _max0) ? (int?)_max0 : null;
                           break;

                        case ProductionIndex.Lengths_Lbracket_Decliteral_Minus_Decliteral_Rbracket:
                        case ProductionIndex.Lengths_Lparen_Decliteral_Minus_Decliteral_Rparen:
                        case ProductionIndex.Lengths_Lbracket_Decliteral_Minus_Max_Rbracket:                 
                        case ProductionIndex.Lengths_Lparen_Decliteral_Minus_Max_Rparen:                 
                        case ProductionIndex.Lengths_Lbracket_Decliteral_Minus_Rbracket:                 
                        case ProductionIndex.Lengths_Lparen_Decliteral_Minus_Rparen:                 
                           // <Lengths> ::= '[' DecLiteral '-' DecLiteral ']'
                           // <Lengths> ::= '(' DecLiteral '-' DecLiteral ')'
                           // <Lengths> ::= '[' DecLiteral '-' max ']'
                           // <Lengths> ::= '(' DecLiteral '-' max ')'
                           // <Lengths> ::= '[' DecLiteral '-' ']'
                           // <Lengths> ::= '(' DecLiteral '-' ')'
                           if (reduction.get_Data(1) is string minLengthData && reduction.get_Data(3) is string maxLengthData)
                           {
                              result.MinLength = int.TryParse(minLengthData, out int _min) ? (int?)_min : null;

                              if (maxLengthData == ModelAttribute.MAXLENGTH_MAX.ToString())
                                 result.MaxLength = ModelAttribute.MAXLENGTH_MAX;
                              else if (maxLengthData == ModelAttribute.MAXLENGTH_UNDEFINED.ToString())
                                 result.MaxLength = null;
                              else
                              {
                                 switch (maxLengthData)
                                 {
                                    case "]": 
                                    case ")":
                                       result.MaxLength = ModelAttribute.MAXLENGTH_UNDEFINED;
                                       break;
                                    case "max":
                                       result.MaxLength = ModelAttribute.MAXLENGTH_MAX;
                                       break;
                                    default:
                                       result.MaxLength = int.TryParse(reduction.get_Data(3) as string, out int _max1) ? (int?)_max1 : null;
                                       break;
                                 }
                              }
                           }

                           if (result.MinLength < 0)
                           {
                              FailMessage = "Min length can't be a negative number";
                              return null;
                           }

                           if (result.MaxLength.HasValue && 
                               result.MaxLength > 0 && 
                               result.MinLength > result.MaxLength)
                           {
                              FailMessage = "Min length cannot be greater than max length";
                              return null;
                           }

                           break;

                        case ProductionIndex.Type_Identifier:

                           // <Type> ::= Identifier
                           result.Type = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Enumvalue_Identifier_Dot_Identifier:

                           // <EnumValue> ::= Identifier '.' Identifier
                           result.InitialValue = $"{reduction.get_Data(0) as string}.{reduction.get_Data(2) as string}";

                           break;

                        case ProductionIndex.Visibility_Public:

                           // <Visibility> ::= public
                           result.SetterVisibility = SetterAccessModifier.Public;
                           break;

                        case ProductionIndex.Visibility_Protected:

                           // <Visibility> ::= protected
                           result.SetterVisibility = SetterAccessModifier.Protected;
                           break;

                        case ProductionIndex.Visibility_Internal:

                           // <Visibility> ::= internal
                           result.SetterVisibility = SetterAccessModifier.Internal;
                           break;

                        case ProductionIndex.Initialvalue_Decliteral:
                        case ProductionIndex.Initialvalue_Hexliteral:
                        case ProductionIndex.Initialvalue_Realliteral:

                           // <Initial Value> ::= DecLiteral | HexLiteral | RealLiteral
                           result.InitialValue = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Initialvalue_Stringliteral:

                           // <Initial Value> ::= StringLiteral
                           result.InitialValue = $"\"{(reduction.get_Data(0) as string).Trim('"')}\"";
                           break;

                        case ProductionIndex.Initialvalue_Charliteral:

                           // <Initial Value> ::= CharLiteral
                           result.InitialValue = $"'{(reduction.get_Data(0) as string).Trim('"', '\'')}'";
                           break;
                     }
                  }
                  break;

               case ParseMessage.Accept:
                  return result;

               case ParseMessage.TokenRead:
                  break;

               case ParseMessage.LexicalError:

                  //Cannot recognize token
                  FailMessage = $"Lexical Error:\nPosition: {Parser.CurrentPosition().Column}\nRead: {Parser.CurrentToken().Data}";
                  return null;

               case ParseMessage.SyntaxError:

                  //Expecting a different token
                  FailMessage = $"Syntax Error:\nPosition: {Parser.CurrentPosition().Column}\nRead: {Parser.CurrentToken().Data}\nExpecting: {Parser.ExpectedSymbols().Text()}";
                  return null;

               case ParseMessage.InternalError:
                  return null;

               case ParseMessage.NotLoadedError:

                  //This error occurs if the CGT was not loaded.                   
                  FailMessage = "Tables not loaded";
                  return null;

               case ParseMessage.GroupError:

                  //GROUP ERROR! Unexpected end of file
                  FailMessage = "Runaway group";
                  return null;
            }
         }
      }

      #region Indices

    private enum ProductionIndex
    {
        @Initializer_Eq = 0,                       // <Initializer> ::= '=' <Initial Value>
        @Namespec = 1,                             // <Name Spec> ::= <Name> <Is Identity>
        @Namespec2 = 2,                            // <Name Spec> ::= <Name>
        @Name_Identifier = 3,                      // <Name> ::= Identifier
        @Isidentity_Identity = 4,                  // <Is Identity> ::= Identity
        @Isoptional_Optional = 5,                  // <Is Optional> ::= Optional
        @Maxlength_Lbracket_Decliteral_Rbracket = 6,  // <Max Length> ::= '[' DecLiteral ']'
        @Maxlength_Lparen_Decliteral_Rparen = 7,   // <Max Length> ::= '(' DecLiteral ')'
        @Maxlength_Lbracketmaxrbracket = 8,        // <Max Length> ::= '[max]'
        @Maxlength_Lparenmaxrparen = 9,            // <Max Length> ::= '(max)'
        @Lengths_Lbracket_Decliteral_Minus_Decliteral_Rbracket = 10,  // <Lengths> ::= '[' DecLiteral '-' DecLiteral ']'
        @Lengths_Lbracket_Decliteral_Minus_Max_Rbracket = 11,  // <Lengths> ::= '[' DecLiteral '-' max ']'
        @Lengths_Lparen_Decliteral_Minus_Decliteral_Rparen = 12,  // <Lengths> ::= '(' DecLiteral '-' DecLiteral ')'
        @Lengths_Lparen_Decliteral_Minus_Max_Rparen = 13,  // <Lengths> ::= '(' DecLiteral '-' max ')'
        @Lengths_Lparen_Decliteral_Minus_Rparen = 14,  // <Lengths> ::= '(' DecLiteral '-' ')'
        @Lengths_Lbracket_Decliteral_Minus_Rbracket = 15,  // <Lengths> ::= '[' DecLiteral '-' ']'
        @Lengths = 16,                             // <Lengths> ::= <Max Length>
        @Typespec = 17,                            // <Type Spec> ::= <Type> <Is Optional> <Lengths>
        @Typespec2 = 18,                           // <Type Spec> ::= <Type> <Lengths>
        @Typespec3 = 19,                           // <Type Spec> ::= <Type> <Is Optional>
        @Typespec4 = 20,                           // <Type Spec> ::= <Type>
        @Type_Identifier = 21,                     // <Type> ::= Identifier
        @Enumvalue_Identifier_Dot_Identifier = 22,  // <EnumValue> ::= Identifier '.' Identifier
        @Visibility_Public = 23,                   // <Visibility> ::= public
        @Visibility_Protected = 24,                // <Visibility> ::= protected
        @Visibility_Internal = 25,                 // <Visibility> ::= internal
        @Initialvalue_Decliteral = 26,             // <Initial Value> ::= DecLiteral
        @Initialvalue_Hexliteral = 27,             // <Initial Value> ::= HexLiteral
        @Initialvalue_Realliteral = 28,            // <Initial Value> ::= RealLiteral
        @Initialvalue_Stringliteral = 29,          // <Initial Value> ::= StringLiteral
        @Initialvalue_Charliteral = 30,            // <Initial Value> ::= CharLiteral
        @Initialvalue = 31,                        // <Initial Value> ::= <EnumValue>
        @Input = 32,                               // <Input> ::= <Visibility> <Type Spec> <Name Spec> <Initializer>
        @Input2 = 33,                              // <Input> ::= <Visibility> <Type Spec> <Name Spec>
        @Input3 = 34,                              // <Input> ::= <Type Spec> <Name Spec> <Initializer>
        @Input4 = 35,                              // <Input> ::= <Type Spec> <Name Spec>
        @Input5 = 36,                              // <Input> ::= <Name Spec> <Initializer>
        @Input6 = 37,                              // <Input> ::= <Name Spec>
        @Input_Colon = 38,                         // <Input> ::= <Visibility> <Name Spec> ':' <Type Spec> <Initializer>
        @Input_Colon2 = 39,                        // <Input> ::= <Visibility> <Name Spec> ':' <Type Spec>
        @Input7 = 40,                              // <Input> ::= <Visibility> <Name Spec> <Initializer>
        @Input8 = 41,                              // <Input> ::= <Visibility> <Name Spec>
        @Input_Colon3 = 42,                        // <Input> ::= <Name Spec> ':' <Type Spec> <Initializer>
        @Input_Colon4 = 43                         // <Input> ::= <Name Spec> ':' <Type Spec>
    }

      #endregion
   }

   public class ParseResult
   {
      public SetterAccessModifier? SetterVisibility { get; set; }
      public string Name { get; set; }
      public string Type { get; set; }
      public bool? Required { get; set; }
      public int? MinLength { get; set; }
      public int? MaxLength { get; set; }
      public string InitialValue { get; set; }
      public bool IsIdentity { get; set; }
   }

}
