using System.Linq;

using Microsoft.VisualStudio.Modeling;
using Microsoft.VisualStudio.Modeling.Diagrams;

using Sawczyn.EFDesigner.EFModel.Extensions;

namespace Sawczyn.EFDesigner.EFModel
{
   [RuleOn(typeof(ModelClass), FireTime = TimeToFire.TopLevelCommit)]
   internal class ModelClassAddRules : AddRule
   {
      public override void ElementAdded(ElementAddedEventArgs e)
      {
         base.ElementAdded(e);

         ModelClass element = (ModelClass)e.ModelElement;
         Store store = element.Store;
         Transaction current = store.TransactionManager.CurrentTransaction;
         ModelRoot modelRoot = store.ModelRoot();

         if (current.IsSerializing || ModelRoot.BatchUpdating)
            return;

         // there could already be an identity property if this class was created via Paste or import
         // NB: don't do anything if we're in an owned type
         if (!element.AllIdentityAttributes.Any() && !element.IsDependentType)
         {
            // there could also be a property named "Id"
            ModelAttribute idProperty = element.AllAttributes.FirstOrDefault(a => a.Name == "Id");

            if (idProperty != null)
               idProperty.IsIdentity = true;
            else
            {
               ModelAttribute newAttribute = new ModelAttribute(element.Partition)
                                             {
                                                Name = "Id",
                                                Type = modelRoot.DefaultIdentityType,
                                                IsIdentity = true,
                                                IdentityType = IdentityType.AutoGenerated
                                             };

               element.Attributes.Add(newAttribute);
            }
         }

         if (modelRoot.ConcurrencyDefault == Concurrency.Optimistic &&
             !element.AllAttributes.Any(x => x.IsConcurrencyToken))
         {
            ModelAttribute concurrencyToken = new ModelAttribute(element.Partition)
                                              {
                                                 Name = "Timestamp",
                                                 Type = "Binary",
                                                 IsConcurrencyToken = true
                                              };

            element.Attributes.Add(concurrencyToken);
         }

         element.DbSetName = ModelRoot.PluralizationService?.IsSingular(element.Name) == true
                                ? ModelRoot.PluralizationService.Pluralize(element.Name)
                                : element.Name;

         element.TableName = ModelRoot.PluralizationService?.IsSingular(element.Name) == true
                                ? ModelRoot.PluralizationService.Pluralize(element.Name)
                                : element.Name;
      }
   }
}
